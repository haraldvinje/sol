// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

project.ext.lwjglVersion = "3.1.2"

project.ext.set('nativeLibsDir', "$buildDir/libs/natives")

// In this section you declare where to find the dependencies of your project
repositories {
    //jcenter()

    mavenCentral()
}

configurations {
    nativeBundle
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:21.0'

    // LWJGL
    compile "org.lwjgl:lwjgl:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"

    nativeBundle "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows@jar"
    nativeBundle "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows@jar"
    nativeBundle "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows@jar"


    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

task extractNativeBundle(type: Sync) {
    from {
        configurations.nativeBundle.collect { zipTree(it) }
    }
    into file(project.nativeLibsDir)
}

task runServer(type: JavaExec) {

    classpath = sourceSets.main.runtimeClasspath

    main = 'game.MainServer'

    systemProperty 'java.library.path', project.nativeLibsDir
}

task runClient(type: JavaExec) {

    classpath = sourceSets.main.runtimeClasspath

    args = ["localhost"]//["192.168.1.24"]

    main = 'game.MainClient'

    systemProperty 'java.library.path', project.nativeLibsDir
}

task runServerClient(dependsOn: ['runClient', 'runServer'])
runClient.mustRunAfter runServer

run {
    mainClassName = 'game.Main'

    systemProperty 'java.library.path', project.nativeLibsDir
}



task createFatOfflineJar(type: Jar) {
    ext.jarTypeInfo = ["-offline", "game.Main"]

    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': 1.1,
                'Main-Class': jarTypeInfo[1]
    }
    baseName = project.name + jarTypeInfo[0] + '-SII'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.nativeBundle.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar //includes classes form project
}

task createFatServerJar(type: Jar) {
    ext.jarTypeInfo = ["-server","game.MainServer"]

    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': 1.1,
                'Main-Class': jarTypeInfo[1]
    }
    baseName = project.name + jarTypeInfo[0] + '-SII'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.nativeBundle.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar //includes classes form project
}

task createFatClientJar(type: Jar) {
    ext.jarTypeInfo = ["-client","game.MainClient"]

    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': 1.1,
                'Main-Class': jarTypeInfo[1]
    }
    baseName = project.name + jarTypeInfo[0] + '-SII'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from { configurations.nativeBundle.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar //includes classes form project
}

//create a single Jar with all dependencies
task createFatJars(dependsOn: [createFatOfflineJar, createFatServerJar, createFatClientJar]) {

}

build.finalizedBy(extractNativeBundle)



// Define the main class for the application



